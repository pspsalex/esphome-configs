# Generic config for M5Paper devices

esphome:
  name: "${device_name}"
  friendly_name: "${friendly_name}"
  platformio_options:
    build_flags:
      - "-DLV_USE_ANIMATION=0"
      - "-DIT8951E_DEBUG_LOGGING=0"
  on_boot:
    - priority: 600
      then:
        - bm8563.clear_alarm
        - bm8563.read_time

external_components:
  - source: github://pspsalex/esphome-m5paper
  #- source:
  #    type: local
  #    path: /home/alex/Proiecte/esphome/esphome-m5paper/components

esp32:
  board: m5stack_paper
  framework:
    type: esp-idf

psram:

# If you really want to use the Arduino framework, you can use the following configuration:
# esp32:
#    board: m5stack-fire
#    framework:
#        type: arduino

m5paper:
  battery_power_pin:
    number: GPIO5
    ignore_strapping_warning: true
  main_power_pin:
    number: GPIO2
    ignore_strapping_warning: true
  sd_cs_pin: GPIO4
  update_interval: never

spi:
  - id: epd_spi
    clk_pin: GPIO14
    mosi_pin:
      number: GPIO12
      ignore_strapping_warning: true
    miso_pin: GPIO13
    interface: spi3

i2c:
  - id: bus_a
    sda: GPIO21
    scl: GPIO22

display:
  - platform: it8951e
    id: m5paper_display
    display_cs_pin:
      number: GPIO15
      ignore_strapping_warning: true
    reset_pin: GPIO23
    ready_pin: GPIO27
    rotation: 0
    reversed: false
    auto_clear_enabled: false
    update_interval: 100ms

touchscreen:
  platform: gt911
  transform:
    swap_xy: true
    mirror_x: false
    mirror_y: true
  id: gt911_touchscreen
  display: m5paper_display
  interrupt_pin: GPIO36

  on_touch:
    - logger.log:
        format: Touch at (%d, %d)
        args: [touch.x, touch.y]
    - lambda: |-
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
            );

lvgl:
  displays:
    - m5paper_display
  touchscreens:
    - gt911_touchscreen

time:
  - id: !extend local_time
    platform: homeassistant
    on_time_sync:
      - bm8563.write_time
      - logger.log: "did bm8563 sync"
      - bm8563.set_fuzzy_alarm: 1 min
      # - deep_sleep.enter
      # - m5paper.shutdown_main_power

  - platform: bm8563
    id: rtc_time
    update_interval: never

globals:
  - id: prev_battery_status
    type: float
    restore_value: false
    initial_value: "0"

sensor:
  # - platform: template
  #   name: "Wakeup Cause"
  #   accuracy_decimals: 0
  #   lambda: return esp_sleep_get_wakeup_cause();

  - platform: adc
    id: battery_voltage_sensor
    pin: GPIO35
    name: "Battery Voltage"
    update_interval: 60s
    attenuation: 12db
    samples: 16
    filters:
      - multiply: 2.0

    on_value:
      - if:
          condition:
            lambda: "return id(battery_voltage_sensor).state != id(prev_battery_status);"
          then:
            - lambda: "id(prev_battery_status) = id(battery_voltage_sensor).state;"
            - lvgl.label.update:
                id: lbl_status_battery
                text: !lambda |-
                  static char buf[10];
                  std::string icon;
                  auto x = id(battery_voltage_sensor).state;
                  if (x >= 4.2) {
                      icon = "\U0000e1a4"; // battery_full
                  } else if (x > 4.1) {
                      icon = "\U0000ebd2"; // battery_6_bar
                  } else if (x > 4.0) {
                      icon = "\U0000ebd4"; // battery_5_bar
                  } else if (x > 3.95) {
                      icon = "\U0000ebe2"; // battery_4_bar
                  } else if (x > 3.9) {
                      icon = "\U0000ebdd"; // battery_3_bar
                  } else if (x > 3.85) {
                      icon = "\U0000ebe0"; // battery_2_bar
                  } else if (x > 3.8) {
                      icon = "\U0000ebd9"; // battery_1_bar
                  } else if (x > 3.75) {
                      icon = "\U0000ebdc"; // battery_0_bar
                  } else {
                      icon = "\U0000e1a6"; // battery_unknown
                  }
                  snprintf(buf, sizeof(buf), "%s", icon.c_str());
                  id(data_updated) = true;
                  ESP_LOGD("battery", "Battery voltage: %.2fV", x);
                  return buf;

  - platform: sht3xd
    temperature:
      name: "Onboard Temperature Sensor"
    humidity:
      name: "Onboard Humidity Sensor"
    address: 0x44
    update_interval: 10s

binary_sensor:
  - platform: gpio
    name: "Right"
    id: button_right
    pin:
      number: GPIO37
      inverted: true

  - platform: gpio
    name: "BTN/PWR"
    id: button_power
    pin:
      number: GPIO38
      inverted: true

  - platform: gpio
    name: "Left"
    id: button_left
    pin:
      number: GPIO39
      inverted: true
